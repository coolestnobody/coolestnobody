{"version":3,"sources":["resources/pic.jpg","components/Footer/Footer.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","Home","props","Fragment","className","src","logo","alt","href","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,iC,uSC0C5BC,I,iBCZAC,EAxBF,SAACC,GACZ,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzC,yBAAKH,UAAU,uBACf,uBAAGA,UAAU,aAAb,8CAIA,uBAAGI,KAAK,8CAA8CC,OAAO,UACzD,uBAAGL,UAAU,2BAEf,uBAAGI,KAAK,oCAAoCC,OAAO,UACjD,uBAAGL,UAAU,6B,YCEVM,MAZf,WAGE,OACE,kBAAC,IAAD,KAEE,kBAAC,EAAD,QCLcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d2b0f873.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pic.77a3ed62.jpg\";","import React, { useState, useEffect } from \"react\";\n// import \"bootstrap/dist/css/bootstrap.css\";\nimport \"./Footer.css\";\n\nfunction Footer(props) {\n  return (\n    <React.Fragment>\n      <div className=\"footer-container\">\n        <div className=\"footer-wrapper\">\n          <div className=\"footer-icons\">\n            <a\n              href=\"https://www.facebook.com/donovan.campbell.96\"\n              target=\"_blank\"\n            >\n              <i className=\"fa fa-facebook footer-icon\"></i>\n            </a>\n            <a\n              href=\"https://www.linkedin.com/in/donovan-campbell-1a9002147/\"\n              target=\"_blank\"\n            >\n              <i className=\"fa fa-linkedin footer-icon\"></i>\n            </a>\n            <a href=\"https://www.instagram.com/donovancmpbll/\" target=\"_blank\">\n              <i className=\"fa fa-instagram footer-icon\"></i>\n            </a>\n          </div>\n          {/* footer-icons */}\n          <p className=\"footer-text\">&copy; 2021 Company Name</p>\n          <p className=\"footer-text\">\n            Powered by{\" \"}\n            <a href=\"https://cloudsurfsoftware.com/\" target=\"_blank\">\n              Cloudsurf\n            </a>{\" \"}\n          </p>\n        </div>\n        {/* footer-wrapper */}\n      </div>\n      {/* footer-container */}\n    </React.Fragment>\n  );\n}\n\nexport default Footer;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./Home.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport logo from \"../../resources/pic.jpg\";\n\nconst Home = (props) => {\n  return (\n    <React.Fragment>\n      <div className=\"home-container\">\n        <img src={logo} className=\"home-img\" alt=\"logo\" />\n        {/* <img src=\"../../resources/pic.jpg\" alt=\"\" className=\"home-img\"/> */}\n        <div className=\"home-text-container\">\n        <p className=\"home-text\">\n          coolestnobody.com coming soon ðŸ˜³\n        </p>\n        \n        <a href=\"https://www.instagram.com/coolestnobodyart/\" target=\"_blank\">\n            <i className=\"fa fa-instagram fa-lg\"></i>\n          </a>\n          <a href=\"https://twitter.com/3rdlittlebird\" target=\"_blank\">\n            <i className=\"fa fa-twitter fa-lg\"></i>\n          </a>\n          \n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Nav from \"./components/Nav/Nav\";\nimport Footer from \"./components/Footer/Footer\";\nimport Home from \"./components/Home/Home\";\n\nimport ReactGA from \"react-ga\";\nimport { useRoutes } from \"hookrouter\";\nimport Routes from \"./services/routes\";\n\nfunction App() {\n  // const routeResult = useRoutes(Routes);\n  // return routeResult;\n  return (\n    <BrowserRouter>\n      {/* <Nav /> */}\n      <Home />\n      {/* <Footer /> */}\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}